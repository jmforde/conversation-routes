"""Create a KML file using CSV and existing list of routes"""

from __future__ import print_function
import csv
from lxml import etree
from RouteEntities import RouteStep
from xml_utils import *

def parse_csv(file_path, routes_person, routes_comp):
    """Read CSV and populate person and compilation routes"""
    with open(file_path) as csvfile:
        csvfile.readline()  # skip headers

        current_resident = None
        reader = csv.reader(csvfile, delimiter=',')
        for row in reader:
            if row[1] != "":
                current_resident = row[1]
                routes_person[current_resident] = []

            for i in chunks(row[5:], 2):
                if i[0] != "":
                    if i[1] == "":
                        print("Missing rating: " + i[0])
                    else:
                        block_id = i[0]
                        rating = int(i[1])
                        routes_person[current_resident].append(RouteStep(block_id, rating))

                        # Populate compilations
                        if not block_id in routes_comp:
                            routes_comp[block_id] = []
                        routes_comp[block_id].append(rating)

def fill_in_route_steps(routes, person_folder, person, coordinates_dict):
    """Fill in the route steps"""
    ratings_dict = {
        1: create_rating_folder(person_folder, 1),
        2: create_rating_folder(person_folder, 2),
        3: create_rating_folder(person_folder, 3)
    }

    for route_step in routes[person]:
        # Put the placemark in the right folder
        parent_folder = ratings_dict[route_step.rating]

        placemark = create_node(parent_folder, "Placemark", route_step.block_id)
        append_node_with_text(placemark, "visibility", "0")
        append_node_with_text(placemark, "styleUrl", "#" + str(route_step.rating) + "StyleMap")

        line_string = etree.SubElement(placemark, "LineString")
        append_node_with_text(line_string, "tessellate", "1")
        coordinates = etree.SubElement(line_string, "coordinates")

        if route_step.block_id in coordinates_dict:
            coordinates.text = coordinates_dict[route_step.block_id]
        else:
            print("Unknown streetblock2: \"" + route_step.block_id + "\"")

    # Remove ratings folders with no placemarks
    for rating in ratings_dict.keys():
        if len(ratings_dict[rating]) <= 1:
            person_folder.remove(ratings_dict[rating])

#  Read in street block mappings
print("Reading street blocks ... ", end="")

DOC_KML = etree.parse('doc.kml')
NSMAP = {'kml': 'http://www.opengis.net/kml/2.2', 'gx' : 'http://www.google.com/kml/ext/2.2'}

folder = DOC_KML.xpath("//kml:Folder[./kml:name = 'STREETBLOCKS 11/8/16']", namespaces = NSMAP)[0]

coordinates_dict = {}
for placemark in folder.xpath('.//kml:Placemark', namespaces=NSMAP):
    #print(placemark[0].text, placemark[3][1].text.strip())
    coordinates_dict[placemark[0].text] = placemark[3][1].text.strip()

print(len(coordinates_dict))

#  Parse google sheets as CSV
walkingRoutesPerson = {} # Person -> array of route steps
walkingRoutesComp = {} # Block ID -> array of ratings
parse_csv('walking.csv', walkingRoutesPerson, walkingRoutesComp)

bikingRoutesPerson = {} # Person -> array of route steps
bikingRoutesComp = {} # Block ID -> array of ratings
parse_csv('biking.csv', bikingRoutesPerson, bikingRoutesComp)

# Create main Kml structure
kml = etree.Element('kml', nsmap=NSMAP)
document = create_node(kml, "Document", "Generated by Python")
residentsFolder = create_folder(document, "Residents")
compilationsFolder = create_folder(document, "Compilations")
append_line_style(document, "green", "ff00ff00", 2)
append_line_style(document, "yellow", "ff00ffff", 2)
append_line_style(document, "red", "ff0000ff", 2)
append_line_style(document, "highlight", "ffaaaaaa", 2)
append_style_map(document, "1StyleMap", "red", "highlight")
append_style_map(document, "2StyleMap", "yellow", "highlight")
append_style_map(document, "3StyleMap", "green", "highlight")

# Populate resident nodes
for person in walkingRoutesPerson.keys():
    personFolder = create_folder(residentsFolder, person)

    walkingFolderPerson = create_folder(personFolder, "Walking")
    bikingFolderPerson = create_folder(personFolder, "Biking")

    fill_in_route_steps(walkingRoutesPerson, walkingFolderPerson, person, coordinates_dict)
    fill_in_route_steps(bikingRoutesPerson, bikingFolderPerson, person, coordinates_dict)

def populate_compulations(routes_comp, root_folder):
    for block_id in routes_comp.keys():
        rating = max(routes_comp[block_id])

        placemark = create_node(root_folder, "Placemark", block_id)
        append_node_with_text(placemark, "visibility", "0")
        append_node_with_text(placemark, "styleUrl", "#" + str(rating) + "StyleMap")

        line_string = etree.SubElement(placemark, "LineString")
        append_node_with_text(line_string, "tessellate", "1")
        coordinates = etree.SubElement(line_string, "coordinates")

        if block_id in coordinates_dict:
            coordinates.text = coordinates_dict[block_id]
        else:
            print("Unknown streetblock: \"" + block_id + "\"")

# Populate compilations
walkingFolderComp = create_folder(compilationsFolder, "Walking")
bikingFolderComp = create_folder(compilationsFolder, "Biking")

populate_compulations(walkingRoutesComp, walkingFolderComp)
populate_compulations(bikingRoutesComp, bikingFolderComp)

# Write out final Kml file
with open('python_generated.kml', 'w') as generatedKml:
    generatedKml.write('<?xml version="1.0" encoding="UTF-8"?>' '\n')
    generatedKml.write(etree.tounicode(kml, pretty_print=True))
    generatedKml.close()
